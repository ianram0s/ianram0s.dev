---
import Background from './background.astro';
import Header from './header.astro';
import { Commands, commands } from '../commands';
---

<script define:vars={{ commands }} is:inline>
    function typeText(element, text, speed = 100) {
        return new Promise((resolve) => {
            let i = 0;
            const timer = setInterval(() => {
                element.textContent += text[i];
                i++;
                if (i >= text.length) {
                    clearInterval(timer);
                    resolve();
                }
            }, speed);
        });
    }

    async function simulateTerminal() {
        const firstCommandDiv = document.getElementById('command-1');
        if (firstCommandDiv) {
            firstCommandDiv.style.display = 'block';
        }

        await new Promise((resolve) => setTimeout(resolve, 800));

        for (let i = 0; i < commands.length; i++) {
            const commandNum = i + 1;
            const command = commands[i];

            if (i > 0) {
                const commandDiv = document.getElementById(`command-${commandNum}`);
                if (commandDiv) {
                    commandDiv.style.display = 'block';
                }
                await new Promise((resolve) => setTimeout(resolve, 500));
            }

            const textElement = document.getElementById(`command-${commandNum}-text`);
            if (textElement) {
                await typeText(textElement, command.commandText, 80);
            }

            await new Promise((resolve) => setTimeout(resolve, 300));

            const cursor = document.getElementById(`cursor-${commandNum}`);
            if (cursor) {
                cursor.style.display = 'none';
            }

            await new Promise((resolve) => setTimeout(resolve, 200));

            const output = document.getElementById(`command-${commandNum}-output`);
            if (output) {
                output.style.display = 'block';
            }

            if (i < commands.length - 1) {
                const intermediatePrompt = document.getElementById(`intermediate-prompt-${commandNum}`);
                if (intermediatePrompt) {
                    intermediatePrompt.style.display = 'flex';
                }
            }

            await new Promise((resolve) => setTimeout(resolve, command.delay));

            if (i < commands.length - 1) {
                const intermediatePrompt = document.getElementById(`intermediate-prompt-${commandNum}`);
                if (intermediatePrompt) {
                    intermediatePrompt.style.display = 'none';
                }
            }
        }

        const finalPrompt = document.getElementById('final-prompt');
        if (finalPrompt) {
            finalPrompt.style.display = 'flex';
        }
    }

    document.addEventListener('DOMContentLoaded', simulateTerminal);
</script>

<div class="min-h-screen bg-black text-green-400 font-mono flex items-center justify-center p-4 overflow-hidden">
    <Background />

    <div class="relative z-10 max-w-4xl w-full">
        <div class="bg-gray-900 rounded-lg shadow-2xl border border-gray-700 overflow-hidden">
            <Header />

            <div class="p-8">
                <Commands />
            </div>
        </div>
    </div>
</div>

<style is:global>
    .cursor-blink {
        animation: cursor-blink 1s infinite;
    }

    @keyframes cursor-blink {
        0%,
        50% {
            opacity: 1;
        }
        51%,
        100% {
            opacity: 0;
        }
    }
</style>
